<?php

declare(strict_types=1);

namespace App\Controller\Admin\CRUD;

use Sonata\AdminBundle\Controller\CRUDController;
use Sonata\AdminBundle\Exception\LockException;
use Sonata\AdminBundle\Exception\ModelManagerException;
use Sonata\AdminBundle\Exception\ModelManagerThrowable;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

final class BookCRUDController extends CRUDController
{

    public function orderAction(Request $request): Response
    {
//        return parent::editAction($request); // TODO: Change the autogenerated stub


        // the key used to lookup the template
        $templateKey = 'order';

        $existingObject = $this->assertObjectExists($request, true);
//        dd($existingObject);
        \assert(null !== $existingObject);

//        $this->checkParentChildAssociation($request, $existingObject);

        $this->admin->checkAccess('order', $existingObject);
//dd(1);
//        $preResponse = $this->preEdit($request, $existingObject);
//        if (null !== $preResponse) {
//            return $preResponse;
//        }

        $this->admin->setSubject($existingObject);
        $objectId = $this->admin->getNormalizedIdentifier($existingObject);
        \assert(null !== $objectId);

        $form = $this->admin->getForm();

        $form->setData($existingObject);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            $isFormValid = $form->isValid();

            // persist if the form was valid and if in preview mode the preview was approved
            if ($isFormValid && (!$this->isInPreviewMode($request) || $this->isPreviewApproved($request))) {
                /** @phpstan-var T $submittedObject */
                $submittedObject = $form->getData();
                $this->admin->setSubject($submittedObject);

                try {
                    $existingObject = $this->admin->update($submittedObject);

                    if ($this->isXmlHttpRequest($request)) {
                        return $this->handleXmlHttpRequestSuccessResponse($request, $existingObject);
                    }

                    $this->addFlash(
                        'sonata_flash_success',
                        $this->trans(
                            'flash_edit_success',
                            ['%name%' => $this->escapeHtml($this->admin->toString($existingObject))],
                            'SonataAdminBundle'
                        )
                    );

                    // redirect to edit mode
                    return $this->redirectTo($request, $existingObject);
                } catch (ModelManagerException $e) {
                    // NEXT_MAJOR: Remove this catch.
                    $this->handleModelManagerException($e);

                    $isFormValid = false;
                } catch (ModelManagerThrowable $e) {
                    $errorMessage = $this->handleModelManagerThrowable($e);

                    $isFormValid = false;
                } catch (LockException $e) {
                    $this->addFlash('sonata_flash_error', $this->trans('flash_lock_error', [
                        '%name%' => $this->escapeHtml($this->admin->toString($existingObject)),
                        '%link_start%' => sprintf('<a href="%s">', $this->admin->generateObjectUrl('edit', $existingObject)),
                        '%link_end%' => '</a>',
                    ], 'SonataAdminBundle'));
                }
            }

            // show an error message if the form failed validation
            if (!$isFormValid) {
                if ($this->isXmlHttpRequest($request) && null !== ($response = $this->handleXmlHttpRequestErrorResponse($request, $form))) {
                    return $response;
                }

                $this->addFlash(
                    'sonata_flash_error',
                    $errorMessage ?? $this->trans(
                        'flash_edit_error',
                        ['%name%' => $this->escapeHtml($this->admin->toString($existingObject))],
                        'SonataAdminBundle'
                    )
                );
            } elseif ($this->isPreviewRequested($request)) {
                // enable the preview template if the form was valid and preview was requested
                $templateKey = 'preview';
                $this->admin->getShow();
            }
        }

        $formView = $form->createView();
        // set the theme for the current Admin Form
        $this->setFormTheme($formView, $this->admin->getFormTheme());

        //$template = $this->templateRegistry->getTemplate($templateKey);
        //$template = $this->templateRegistry->getTemplate($templateKey);

        return $this->renderWithExtraParams('admin/book/order.html.twig', [
            'action' => 'edit',
            'form' => $formView,
            'object' => $existingObject,
            'objectId' => $objectId,
        ]);

    }

//    public function __construct(
//        private AuthenticatorInterface $authenticator
//    ) {
//    }
//
//    public function loginAction(
//        AuthenticationUtils $authUtils
//    ): Response {
//        $error        = $authUtils->getLastAuthenticationError();
//        $lastUsername = $authUtils->getLastUsername();
//        $form         = $this->createForm(ReaderLoginUserType::class);
//        $formView     = $form->createView();
//
//        // set the theme for the current Admin Form
//        $this->setFormTheme($formView, $this->admin->getFormTheme());
//
//        return $this->renderWithExtraParams('admin/user/reader-login.html.twig', [
//            'action'        => 'login',
//            'form'          => $formView,
//            'object'        => null,
//            'objectId'      => null,
//            'last_username' => $lastUsername,
//            'error'         => $error,
//        ]);
//    }
//
//    public function registerAction(
//        Request $request,
//        MessageBusHandler $messageBusHandler,
//        UserRepository $userRepository,
//        UserAuthenticatorInterface $userAuthenticator,
//    ): Response {
//        $form = $this->createForm(ReaderRegisterUserType::class, null, ['userRepository' => $userRepository]);
//        $form->handleRequest($request);
//
//        if ($form->isSubmitted()) {
//            $isFormValid = $form->isValid();
//
//            // save data
//            if ($isFormValid) {
//                try {
//                    /** @var User */
//                    $user = $messageBusHandler->handleCommand(
//                        new RegisterUserCommand(
//                            firstName: $form->get('first_name')->getData(),
//                            lastName:  $form->get('last_name')->getData(),
//                            email:     $form->get('email')->getData(),
//                            password:  $form->get('password')->getData(),
//                        )
//                    );
//
//                    return $userAuthenticator->authenticateUser($user, $this->authenticator, $request);
//                } catch (Throwable $e) {
//                    $this->addFlash(
//                        'sonata_flash_error',
//                        $this->trans($e->getMessage(), [], $this->admin->getTranslationDomain())
//                    );
//                }
//            }
//
//            if (!$isFormValid) {
//                $this->addFlash(
//                    'sonata_flash_error',
//                    $this->trans('USER_ENTITY.ERROR.REGISTER', [], $this->admin->getTranslationDomain())
//                );
//            }
//        }
//
//
//        $formView = $form->createView();
//        // set the theme for the current Admin Form
//        $this->setFormTheme($formView, $this->admin->getFormTheme());
//
//        return $this->renderWithExtraParams('admin/user/reader-register.html.twig', [
//            'action'   => 'register',
//            'form'     => $formView,
//            'object'   => null,
//            'objectId' => null,
//        ]);
//    }

}
